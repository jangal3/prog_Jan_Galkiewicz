import pygame
from random import randint
from math import log
import os

pygame.init()

res = (1280,720)

screen = pygame.display.set_mode(res)
pygame.display.set_caption("Spire Climb")

fps = 60
plrWidth, plrHeight = 72, 72

plr = pygame.Rect(0,0,plrWidth,plrHeight)
lwall = pygame.Rect(0,0,res[0]//18,res[1])
rwall = pygame.Rect(res[0]*17//18+1,0,res[0]//18,res[1])
Platforms = [(0,0,res[0],72)]

start = pygame.Rect(res[0]*2//3,res[1]*0.3,res[0]//4,res[1]//12)
rules = pygame.Rect(res[0]*2//3,res[1]*0.4,res[0]//4,res[1]//12)
scores = pygame.Rect(res[0]*2//3,res[1]*0.5,res[0]//4,res[1]//12)
config = pygame.Rect(res[0]*2//3,res[1]*0.6,res[0]//4,res[1]//12)
about = pygame.Rect(res[0]*2//3,res[1]*0.7,res[0]//4,res[1]//12)
exit = pygame.Rect(res[0]*2//3,res[1]*0.8,res[0]//4,res[1]//12)
select = pygame.Rect(res[0]*2//3,0,res[0]//4,res[1]//12)

rulset = pygame.Rect(res[0]/9,res[1]/9,res[0]*7/9,res[1]*7/9)
scoreboard = pygame.Rect(res[0]/9,res[1]/9,res[0]*7/9,res[1]*7/9)
description = pygame.Rect(res[0]/9,res[1]/9,res[0]*7/9,res[1]*7/9)

pause = pygame.Rect(res[0]*4/9,res[1]*3/7,res[0]/9,res[1]/7)

for i in range(6):
    s = randint(res[0]//9,res[0]*8//9)
    d = randint(res[0]//12,res[0]//9)
    Platforms.append((s-d,i*144+144,2*d,36))

print(Platforms)

class Player:
    def __init__(self,x,y,vx=0,vy=0,acc=0.4,dcc=0.2,g=1):
        self.x = x
        self.y = y
        self.vx = vx
        self.vy = vy
        self.acc = acc
        self.dcc = dcc
        self.g = g
    def set_x(self,key):
        if key[pygame.K_a]:
            self.vx = self.vx-self.acc
        if key[pygame.K_d]:
            self.vx = self.vx+self.acc
        if not (key[pygame.K_a] or key[pygame.K_d]):
            if self.vx > 0:
                self.vx = max(0,self.vx - self.dcc)
            if self.vx < 0:
                self.vx = min(0,self.vx + self.dcc)
        self.x = self.x + self.vx
        a = abs(self.vx) + 0.01
        a = max(0,a-81/a)
        if self.x < lwall.w:
            self.x = lwall.w
            self.vx = a*0.75
        if self.x + plrWidth > rwall.x:
            self.x = rwall.x - plrWidth
            self.vx = -a*0.75
        return self.x
    def set_y(self,key):
        self.vy -= self.g
        self.y += self.vy
        if self.vy < 0:
            for i in Platforms:
                if self.x + plrWidth > i[0] and self.x < i[0] + i[2] and self.y <= i[1] and self.y >= i[1] + self.vy:
                    self.vy = 0
                    self.y = i[1]
                    if key[pygame.K_w]:
                        self.vy = abs(self.vx)*0.4 + 24
        return self.y


def render(scroll):
    screen.fill((191,191,191))
    for i in Platforms:
        platf = pygame.Rect(i[0],scroll-i[1],i[2],i[3])
        pygame.draw.rect(screen,(63,63,63),platf)
    pygame.draw.rect(screen,(0,0,0),lwall)
    pygame.draw.rect(screen,(0,0,0),rwall)
    pygame.draw.rect(screen,(0,0,0),plr)
    pygame.display.update()

def menu(pick):
    screen.fill((191,191,191))
    pygame.draw.rect(screen,(0,0,0),start)
    pygame.draw.rect(screen,(0,0,0),rules)
    pygame.draw.rect(screen,(0,0,0),scores)
    pygame.draw.rect(screen,(0,0,0),config)
    pygame.draw.rect(screen,(0,0,0),about)
    pygame.draw.rect(screen,(0,0,0),exit)
    select.y = res[1]*(3+pick)/10
    pygame.draw.rect(screen,(255,0,0),select)
    pygame.display.update()

def main():
    Acy = Player(600,0)
    scroll = 648
    clock = pygame.time.Clock()
    run = True
    game = 0
    pick = 0
    ok = True
    while run:
        clock.tick(fps)
        key = pygame.key.get_pressed()
        if not (key[pygame.K_s] or key[pygame.K_w] or key[pygame.K_SPACE]):
            ok = True
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
        if game == 0: #menu
            if key[pygame.K_s] and ok:
                pick = min(5,pick+1)
                ok = False
            if key[pygame.K_w] and ok:
                pick = max(0,pick-1)
                ok = False
            if key[pygame.K_SPACE] and ok:
                game = pick+1
                ok = False
            menu(pick)
        if game == 1: #start
            if key[pygame.K_SPACE] and ok:
                game = 7
                ok = False
            scroll += max(0,res[1]/6 - plr.y) + max(0, log(Acy.y/360 + 0.01))
            if scroll > Acy.y + res[1] - 36:
                scroll = Acy.y + res[1] - 36
            plr.x = Acy.set_x(key)
            plr.y = scroll - Acy.set_y(key) - plrHeight
            if scroll > len(Platforms)*144-144:
                s = randint(res[0]//9,res[0]*8//9)
                d = randint(res[0]//12,res[0]//9)
                Platforms.append((s-d,len(Platforms)*144,2*d,36))
            render(scroll)
        if game == 2: #rules
            if key[pygame.K_SPACE] and ok:
                game = 0
                ok = False
            screen.fill((191,191,191))
            pygame.draw.rect(screen,(0,0,0),rulset)
            pygame.display.update()
        if game == 3: #scores
            if key[pygame.K_SPACE] and ok:
                game = 0
                ok = False
            screen.fill((191,191,191))
            pygame.draw.rect(screen,(0,0,0),scoreboard)
            pygame.display.update()
        if game == 4: #config
            if key[pygame.K_SPACE] and ok:
                game = 0
                ok = False
            screen.fill((191,191,191))
            pygame.display.update()
        if game == 5: #about
            if key[pygame.K_SPACE] and ok:
                game = 0
                ok = False
            screen.fill((191,191,191))
            pygame.draw.rect(screen,(0,0,0),description)
            pygame.display.update()
        if game == 6: #exit
            run = False
        if game == 7: #pause
            if key[pygame.K_SPACE] and ok:
                game = 1
                ok = False
            pygame.draw.rect(screen,(0,0,0),pause)
            pygame.display.update()
            
if __name__ == "__main__":
    main()
